stages:
  - test
  - publish

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

.test:
  parallel:
    matrix:
      - PY_VERSION: [ "3.9", "3.10", "3.11", "3.12" ]
  stage: test
  image: python:$PY_VERSION
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - test $(echo $PY_VERSION | cut -d . -f 2) -gt 12 && (apt update && apt install -y gfortran libopenblas-dev)
    - pip install --root-user-action ignore -q poetry
    - poetry install

unit tests:
  extends: .test
  script:
    - poetry run pytest --junitxml=pytest.xml tests/unit
  artifacts:
    reports:
      junit:
        - pytest.xml

integration tests:
  extends: .test
  script:
    - poetry run pytest --junitxml=pytest.xml tests/integration
  artifacts:
    reports:
      junit:
        - pytest.xml

mypy:
  extends: .test
  script:
    - poetry run mypy duplicate_images tests

flake8:
  extends: .test
  script:
    - poetry run flake8 duplicate_images tests

pylint:
  extends: .test
  script:
    - test $(echo $PY_VERSION | cut -d . -f 2) -ge 12 && PYLINT_EXTRA_ARGS="--disable=inconsistent-quotes"
    - poetry run pylint $PYLINT_EXTRA_ARGS duplicate_images tests

bandit:
  extends: .test
  parallel:
    matrix:
      - PY_VERSION: [ "3.12" ]
  script:
    - poetry run bandit -r duplicate_images

ChangelogIsUpdated:
  stage: test
  image: alpine:latest
  rules:
    - if: "$CI_MERGE_REQUEST_ID"
    - if: $CI_COMMIT_BRANCH == "master"
  script:
    - VERSION=$(egrep 'version = ".*"' pyproject.toml | cut -d \" -f 2)
    - test -n "$VERSION"
    - fgrep "## [$VERSION]" CHANGELOG.md
    - fgrep "...$VERSION" CHANGELOG.md
    - fgrep "## [$VERSION] - $(date +%Y-%m-%d)" CHANGELOG.md


RunAndCheckResults:
  extends: .test
  variables:
    IMAGE_DIR: tests/integration/data/equal_but_binary_different
  script:
    - NUM_FILES=$(find $IMAGE_DIR -type f | wc -l)
    - EXPECTED_PAIRS=$((NUM_FILES*(NUM_FILES-1)/2)) # should be if all files matched...
    - EXPECTED_PAIRS=29 # ...turns out not all files match with each other though
    - NUM_PAIRS=$(poetry run find-dups $IMAGE_DIR | wc -l)
    - test $NUM_PAIRS -eq $EXPECTED_PAIRS
    - NUM_PAIRS=$(poetry run find-dups $IMAGE_DIR --progress --quiet | wc -l)
    - test $NUM_PAIRS -eq $EXPECTED_PAIRS
    - NUM_PAIRS=$(poetry run find-dups $IMAGE_DIR --algorithm ahash --quiet | wc -l)
    - test $NUM_PAIRS -eq $EXPECTED_PAIRS
    - NUM_PAIRS=$(poetry run find-dups $IMAGE_DIR --max-distance 1 --quiet | wc -l)
    - test $NUM_PAIRS -eq $EXPECTED_PAIRS
    - NUM_PAIRS=$(poetry run find-dups $IMAGE_DIR --hash-size 8 --quiet | wc -l)
    - test $NUM_PAIRS -eq $EXPECTED_PAIRS

RunWithArgs:
  extends: .test
  image: python:3.12
  variables:
    IMAGE_DIR: tests/integration/data
    HASH_DB: test.pickle
  parallel:
    matrix:
      - ON_EQUAL: [print, quote_inline, none, d<]
        ALGORITHM: [ahash, colorhash]
        MODE: ["", --slow, --parallel]
  script:
    # ensure the script runs without any error with the given options
    - poetry run find-dups 
        ${IMAGE_DIR} --hash-db ${HASH_DB} --progress 
        --algorithm ${ALGORITHM} 
        --on-equal ${ON_EQUAL} 
        $MODE
    # ensure the hash cache file is written
    - test -f ${HASH_DB}
    - ls -l ${HASH_DB}

RunWithArgsExec:
  extends: RunWithArgs
  parallel:
    matrix:
      - ON_EQUAL: [exec]
        ALGORITHM: [ahash]
        MODE: ["", --slow, --parallel]
  script:
    # ensure the script runs without any error with the given options
    - poetry run find-dups 
        ${IMAGE_DIR} --hash-db ${HASH_DB} --progress --exec "ls -l {1} {2}" 
        --algorithm ${ALGORITHM} 
        --on-equal ${ON_EQUAL} 
        $MODE
    # ensure the hash cache file is written
    - test -f ${HASH_DB}
    - ls -l ${HASH_DB}

RunWithArgsExecFailure:
  extends: RunWithArgs
  parallel:
    matrix:
      - ON_EQUAL: [ "" ]
        ALGORITHM: [ "" ]
        MODE: [ "" ]
  script:
    # ensure the script fails when given --exec without --on-equal exec
    - poetry run find-dups 
        ${IMAGE_DIR} --hash-db ${HASH_DB} --progress --exec "ls -l {1} {2}" && exit 1
    # ensure the script fails when given --on-equal exec without --exec
    - poetry run find-dups 
        ${IMAGE_DIR} --hash-db ${HASH_DB} --progress --on-equal exec && exit 1
    - exit 0

TagIsNew:
  stage: test
  image: alpine:latest
  rules:
    - if: "$CI_MERGE_REQUEST_ID"
    - if: $CI_COMMIT_BRANCH == "master"
  before_script:
    - apk update
    - apk add git
  script:
    - VERSION=$(egrep 'version = ".*"' pyproject.toml | cut -d \" -f 2)
    - test -n "$VERSION"
    - git tag | ( ! grep "^${VERSION}\$" )

CreateTag:
  stage: publish
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule"
      when: on_success
  before_script:
    - apk update
    - apk add git
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git config user.name "${GITLAB_USER_NAME}"
  script:
    - VERSION=$(egrep 'version = ".*"' pyproject.toml | cut -d \" -f 2)
    - echo "**** Tagging release as version $VERSION"
    - git remote add tag-origin https://oauth2:${GITLAB_ACCESS_TOKEN}@gitlab.com/${CI_PROJECT_PATH}
    - git tag -a "${VERSION}" -m "Released $(date +%Y-%m-%d)"
    - git push tag-origin "${VERSION}"

PublishToPyPI:
  stage: publish
  image: python:3.11
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success
  script:
    - VERSION=$(egrep 'version = ".*"' pyproject.toml | cut -d \" -f 2)
    - test "${CI_COMMIT_TAG}" == "${VERSION}" || exit 1
    - echo "**** Upgrading to ${VERSION}"
    - pip install -q poetry
    - poetry build
    - poetry config repositories.testpypi https://test.pypi.org/legacy/
    - poetry publish --username __token__ --password ${TESTPYPI_TOKEN} --repository testpypi
    - echo "**** Attempting pip install from test PyPI server"
    - apt-get -y -qq update
    - apt-get -y -q install libsndfile1 ffmpeg > /dev/null
    - pip install -q --index-url https://test.pypi.org/simple --extra-index-url https://pypi.org/simple duplicate_images
    - echo "**** Publishing on live PyPI server"
    - poetry publish --username __token__ --password ${PYPI_TOKEN}

PushToGithub:
  stage: publish
  image: alpine:latest
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success
  before_script:
    - apk update
    - apk add openssh-client git sshpass
    - eval $(ssh-agent -s)
    - echo "$GITHUB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh -T git@github.com 2>&1 || true
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git config user.name "${GITLAB_USER_NAME}"
  script:
    - git remote add github git@github.com:lene/DuplicateImages.git
    - git remote show github
    - BRANCH=${CI_COMMIT_BRANCH:-master}
    - git checkout $BRANCH
    - git push github $BRANCH
    - git push github $CI_COMMIT_TAG

CreateGithubRelease:
  stage: publish
  needs:
    - PushToGithub
  image: alpine:latest
  rules:
    - if: "$CI_COMMIT_TAG"
      when: on_success
  before_script:
    - apk update
    - apk add curl
  variables:
    RELEASE_API_URL: "https://api.github.com/repos/lene/DuplicateImages/releases"
    DESCRIPTION: "Full Changelog: https://github.com/lene/DuplicateImages/blob/${CI_COMMIT_TAG}/CHANGELOG.md"
  script:
    - POST_DATA='{
        "tag_name":"'${CI_COMMIT_TAG}'",
        "target_commitish":"master",
        "name":"'${CI_COMMIT_TAG}'",
        "body":"'${FULL_DESCRIPTION}${DESCRIPTION}'",
        "draft":false,
        "prerelease":false,
        "generate_release_notes":false
      }'
    - echo $API_URL
    - echo $POST_DATA
    - 'curl -L -X POST 
         -H "Accept: application/vnd.github+json" 
         -H "X-GitHub-Api-Version: 2022-11-28" 
         -H "Authorization: Bearer ${GITHUB_API_TOKEN}"
         ${RELEASE_API_URL} -d "${POST_DATA}"'

CreateGitlabRelease:
  stage: publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "running release_job" # dummy, see https://gitlab.com/gitlab-org/gitlab/-/issues/223856
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: './CHANGELOG.md'